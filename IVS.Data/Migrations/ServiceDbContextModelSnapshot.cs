// <auto-generated />
using IVS.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IVS.Data.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    partial class ServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IVS.Data.Entities.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("IVS.Data.Entities.FlowsToVideos", b =>
                {
                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("FlowId", "VideoId");

                    b.HasIndex("VideoId");

                    b.ToTable("FlowsToVideos");
                });

            modelBuilder.Entity("IVS.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IVS.Data.Entities.GroupsToFlows", b =>
                {
                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("FlowId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsToFlows");
                });

            modelBuilder.Entity("IVS.Data.Entities.GroupsToVideos", b =>
                {
                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("VideoId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsToVideos");
                });

            modelBuilder.Entity("IVS.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IVS.Data.Entities.UsersToFlows", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FlowId");

                    b.HasIndex("FlowId");

                    b.ToTable("UsersToFlows");
                });

            modelBuilder.Entity("IVS.Data.Entities.UsersToGroups", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UsersToGroups");
                });

            modelBuilder.Entity("IVS.Data.Entities.UsersToVideos", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VideoId");

                    b.HasIndex("VideoId");

                    b.ToTable("UsersToVideos");
                });

            modelBuilder.Entity("IVS.Data.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("IVS.Data.Entities.FlowsToVideos", b =>
                {
                    b.HasOne("IVS.Data.Entities.Flow", "Flow")
                        .WithMany("FlowsToVideos")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVS.Data.Entities.Video", "Video")
                        .WithMany("FlowsToVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("IVS.Data.Entities.GroupsToFlows", b =>
                {
                    b.HasOne("IVS.Data.Entities.Flow", "Flow")
                        .WithMany("GroupsToFlows")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVS.Data.Entities.Group", "Group")
                        .WithMany("GroupsToFlows")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("IVS.Data.Entities.GroupsToVideos", b =>
                {
                    b.HasOne("IVS.Data.Entities.Group", "Group")
                        .WithMany("GroupsToVideos")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVS.Data.Entities.Video", "Video")
                        .WithMany("GroupsToVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("IVS.Data.Entities.UsersToFlows", b =>
                {
                    b.HasOne("IVS.Data.Entities.Flow", "Flow")
                        .WithMany("UsersToFlows")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVS.Data.Entities.User", "User")
                        .WithMany("UsersToFlows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IVS.Data.Entities.UsersToGroups", b =>
                {
                    b.HasOne("IVS.Data.Entities.Group", "Group")
                        .WithMany("UsersToGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVS.Data.Entities.User", "User")
                        .WithMany("UsersToGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IVS.Data.Entities.UsersToVideos", b =>
                {
                    b.HasOne("IVS.Data.Entities.User", "User")
                        .WithMany("UsersToVideos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVS.Data.Entities.Video", "Video")
                        .WithMany("UsersToVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("IVS.Data.Entities.Flow", b =>
                {
                    b.Navigation("FlowsToVideos");

                    b.Navigation("GroupsToFlows");

                    b.Navigation("UsersToFlows");
                });

            modelBuilder.Entity("IVS.Data.Entities.Group", b =>
                {
                    b.Navigation("GroupsToFlows");

                    b.Navigation("GroupsToVideos");

                    b.Navigation("UsersToGroups");
                });

            modelBuilder.Entity("IVS.Data.Entities.User", b =>
                {
                    b.Navigation("UsersToFlows");

                    b.Navigation("UsersToGroups");

                    b.Navigation("UsersToVideos");
                });

            modelBuilder.Entity("IVS.Data.Entities.Video", b =>
                {
                    b.Navigation("FlowsToVideos");

                    b.Navigation("GroupsToVideos");

                    b.Navigation("UsersToVideos");
                });
#pragma warning restore 612, 618
        }
    }
}
